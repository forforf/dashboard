// Generated by CoffeeScript 1.3.3
(function() {
  var Color, StatusGraph, old_interpolateColor, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  old_interpolateColor = function(minColor, maxColor, maxDepth, depth) {
    var color, d2h, h2d, i, maxVal, minVal, nVal, val, _i;
    d2h = function(d) {
      return d.toString(16);
    };
    h2d = function(h) {
      return parseInt(h, 16);
    };
    if (depth === 0) {
      return minColor;
    }
    if (depth === maxDepth) {
      return maxColor;
    }
    color = "#";
    for (i = _i = 1; _i <= 6; i = _i += 2) {
      minVal = new Number(h2d(minColor.substr(i, 2)));
      maxVal = new Number(h2d(maxColor.substr(i, 2)));
      nVal = minVal + (maxVal - minVal) * (depth / maxDepth);
      val = d2h(Math.floor(nVal));
      while (val.length < 2) {
        val = "0" + val;
      }
      color += val;
    }
    return color;
  };

  Color = {
    interpolate: function(minColor, maxColor, maxDepth, depth) {
      var color, d2h, h2d, i, maxVal, minVal, nVal, val, _i;
      d2h = function(d) {
        return d.toString(16);
      };
      h2d = function(h) {
        return parseInt(h, 16);
      };
      if (depth === 0) {
        return minColor;
      }
      if (depth === maxDepth) {
        return maxColor;
      }
      color = "#";
      for (i = _i = 1; _i <= 6; i = _i += 2) {
        minVal = new Number(h2d(minColor.substr(i, 2)));
        maxVal = new Number(h2d(maxColor.substr(i, 2)));
        nVal = minVal + (maxVal - minVal) * (depth / maxDepth);
        val = d2h(Math.floor(nVal));
        while (val.length < 2) {
          val = "0" + val;
        }
        color += val;
      }
      return color;
    }
  };

  StatusGraph = (function() {
    var colors, data_bounds, gradient_colors;

    gradient_colors = {
      start: "#cc8282",
      stop: "#22ff22"
    };

    colors = {
      bg_start: Color.interpolate("#ffffff", gradient_colors.start, 4, 1),
      bg_stop: Color.interpolate("#ffffff", gradient_colors.stop, 4, 1),
      max_color_steps: 10,
      text: "#003300"
    };

    data_bounds = {
      min_score: 0,
      max_score: 10
    };

    function StatusGraph(d3_parent, repo_data) {
      var bar_data, cat_data, cat_name, _ref;
      this.d3_parent = d3_parent;
      this.repo_data = repo_data;
      this.svg = __bind(this.svg, this);

      console.log("d3El", this.de_parent);
      this.sizing = {
        chart_width: function() {
          return document.getElementById('repos').offsetWidth;
        },
        bar_height: 16
      };
      this.text = {
        font_size: parseInt(this.sizing.bar_height * .75),
        color: colors.text
      };
      bar_data = [];
      _ref = this.repo_data;
      for (cat_name in _ref) {
        cat_data = _ref[cat_name];
        if (cat_data.score) {
          bar_data.push({
            name: cat_name,
            score: cat_data.score
          });
        }
      }
      this.bar_data = bar_data;
      this.chart_height = this.sizing.bar_height * this.bar_data.length;
      console.log(data_bounds.min_score, data_bounds.max_score);
      this.scaler = d3.scale.linear().domain([data_bounds.min_score, data_bounds.max_score]).range([0, this.sizing.chart_width()]);
      console.log("Scaler Test", this.scaler(100));
    }

    StatusGraph.prototype.interpolateColors = function(color_step) {
      var start, stop;
      start = gradient_colors.start;
      stop = gradient_colors.stop;
      return Color.interpolate(start, stop, colors.max_color_steps, color_step);
    };

    StatusGraph.prototype.svg = function() {
      var bg_gradient, chart, gradient_defs, gradients, i, iters, self, _i, _j, _len, _ref, _results;
      chart = this.d3_parent.append('svg:svg');
      gradient_defs = chart.append("svg:defs");
      bg_gradient = gradient_defs.append("svg:linearGradient").attr("id", "bg_gradient").attr("x1", "0%").attr("y1", "0%").attr("x2", "100%").attr("y2", "0%").attr("spreadMethod", "pad");
      bg_gradient.append("svg:stop").attr("offset", "0%").attr("stop-color", colors.bg_start).attr("stop-opacity", 1);
      bg_gradient.append("svg:stop").attr("offset", "100%").attr("stop-opacity", 1).attr("stop-color", colors.bg_stop);
      iters = (function() {
        _results = [];
        for (var _i = 0, _ref = colors.max_color_steps; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      gradients = [];
      for (_j = 0, _len = iters.length; _j < _len; _j++) {
        i = iters[_j];
        console.log(i);
        gradients[i] = gradient_defs.append("svg:linearGradient").attr("id", "gradient-" + i).attr("x1", "0%").attr("y1", "0%").attr("x2", "100%").attr("y2", "0%").attr("spreadMethod", "pad");
        gradients[i].append("svg:stop").attr("offset", "0%").attr("stop-color", gradient_colors.start).attr("stop-opacity", 1);
        gradients[i].append("svg:stop").attr("offset", "100%").attr("stop-opacity", 1).attr("stop-color", this.interpolateColors(i));
      }
      chart.attr("class", "chart").attr("height", this.chart_height);
      chart.attr("width", this.sizing.chart_width);
      chart.append("rect").attr("class", "bg").attr("width", this.sizing.chart_width).attr("height", this.chart_height).style("fill", "url(#bg_gradient)");
      self = this;
      chart.selectAll("rect.repo-chart-bg").data(this.bar_data).enter().append("rect").attr("class", "bars").attr("y", function(d, i) {
        return i * self.sizing.bar_height;
      }).attr("width", function(d) {
        return self.scaler(d.score);
      }).attr("height", self.sizing.bar_height).style("fill", function(d, i) {
        return "url(#gradient-" + d.score + ")";
      });
      return chart.selectAll("text").data(this.bar_data).enter().append("text").attr("x", 0).attr("y", function(d, i) {
        return self.sizing.bar_height * i;
      }).attr("dy", 10).attr("text-anchor", "left").attr("style", "font-size: " + self.text.font_size + "; font-family: Arial, sans-serif").attr("fill", self.text.color).text(function(d) {
        return d.name;
      }).attr("transform", "translate(8,1)").attr("class", "labels");
    };

    return StatusGraph;

  })();

  root.StatusGraph = StatusGraph;

}).call(this);
